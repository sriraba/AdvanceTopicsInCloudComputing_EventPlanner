{
  "Description": "A template is for creating lambda ",
  "Resources": {
    "MyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "verifyWedSlots",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "import json",
                "import boto3",
                "",
                "dynamodb = boto3.client('dynamodb')",
                "",
                "def lambda_handler(event, context):",
                "    date = event['date']",
                "    print(date)",
                "    print('The type is : ', type(date))",
                "",
                "    response = dynamodb.query(",
                "        TableName='wedding_slots_new1',",
                "        KeyConditionExpression='event_date = :pk',",
                "        ExpressionAttributeValues={",
                "            ':pk': {'S': date}",
                "        }",
                "    )",
                "",
                "    print(' response[\"Items\"]', response['Items'])",
                "    for item in response['Items']:",
                "        slot_count = item['max_bookings']",
                "        print('slot_count ', slot_count['S'])",
                "",
                "    if slot_count['S'] != '0':",
                "        updateSlotCount(slot_count, date)",
                "        slot_response = {",
                "            'type': 'QUEUE',",
                "            'returnCode': 0,",
                "            'email': event['email'],",
                "            'firstname': event['firstname'],",
                "            'phone': event['phone'],",
                "            'city': event['city'],",
                "            'guestcount': event['guestcount'],",
                "            'date': event['date'],",
                "            'budget': event['budget']",
                "        }",
                "    else:",
                "        slot_response = {",
                "            'type': 'APP',",
                "            'returnCode': 0,",
                "            'email': event['email'],",
                "            'firstname': event['firstname'],",
                "            'phone': event['phone'],",
                "            'city': event['city'],",
                "            'guestcount': event['guestcount'],",
                "            'date': event['date'],",
                "            'budget': event['budget']",
                "        }",
                "    print(slot_response)",
                "    return slot_response",
                "",
                "",
                "def updateSlotCount(slot_count, date):",
                "    updated_count = int(slot_count['S']) - 1",
                "    dict_data = {",
                "        'date': date,",
                "        'count': str(updated_count)",
                "    }",
                "    result = dynamodb.update_item(",
                "        TableName='wedding_slots_new1',",
                "        Key={",
                "            'event_date': {'S': dict_data['date']}",
                "        },",
                "        UpdateExpression='SET max_bookings = :val',",
                "        ExpressionAttributeValues={",
                "            ':val': {'S': dict_data['count']}",
                "        }",
                "    )",
                "",
                "",
                ""
              ]
            ]
          }
        },
        "Description": "Used to verify wedding slot count",
        "Handler": "index.lambda_handler",
        "Role": "arn:aws:iam::096938558188:role/LabRole",
        "Runtime": "python3.9",
        "TracingConfig": {
          "Mode": "Active"
        }
      }
    },
    "MyLambdaFunction2": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "verifyBdaySlots",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "import json",
                "import boto3",
                "",
                "dynamodb = boto3.client('dynamodb')",
                "",
                "def lambda_handler(event, context):",
                "    date = event['date']",
                "    # body = json.loads(body)",
                "    print(date)",
                "    # TODO implement",
                "    print('The type is : ', type(date))",
                "",
                "    response = dynamodb.query(",
                "        TableName='birthday_slots_new1',",
                "        KeyConditionExpression='event_date = :pk',",
                "        ExpressionAttributeValues={",
                "            ':pk': {'S': date}",
                "        }",
                "    )",
                "",
                "    print(\" response['Items']\" ,  response['Items'])",
                "    for item in response['Items']:",
                "        slot_count = item['max_bookings']",
                "        print('slot_count ', slot_count['S'])",
                "",
                "    if slot_count['S'] !='0':",
                "        updateSlotCount(slot_count,date)",
                "        slot_response = {\"type\": \"QUEUE\", \"returnCode\": 0, ",
                "        \"email\": event['email'],",
                "        \"firstname\":event['firstname'], ",
                "        \"email\": event['email'],",
                "        \"phone\":event['phone'],",
                "        \"city\": event['city'],",
                "        \"guestcount\":event['guestcount'],",
                "        \"date\": event['date'],",
                "        \"budget\":event['budget']",
                "        }",
                "    else:",
                "        # if slot_count['S'] == '1' or slot_count['S'] == '2':",
                "        #     print('slot count is either 0 or 1')",
                "        #     updateSlotCount(slot_count,date)",
                "        slot_response = {\"type\": \"APP\", \"returnCode\": 0,",
                "        \"email\": event['email'],",
                "        \"firstname\":event['firstname'], ",
                "        \"email\": event['email'],",
                "        \"phone\":event['phone'],",
                "        \"city\": event['city'],",
                "        \"guestcount\":event['guestcount'],",
                "        \"date\": event['date'],",
                "        \"budget\":event['budget']}",
                "    print(slot_response)",
                "    return slot_response;",
                "",
                "",
                "def updateSlotCount(slot_count,date):",
                "    updated_count = int(slot_count['S']) -1",
                "    dict_data = {}",
                "    dict_data['date'] = date",
                "    dict_data['count'] = str(updated_count)",
                "    result = dynamodb.update_item(  ",
                "        TableName='birthday_slots_new1',",
                "            Key={  ",
                "                'event_date': {'S' : dict_data['date'] }",
                "            },  ",
                "            UpdateExpression='SET max_bookings = :val', ",
                "            ExpressionAttributeValues={  ",
                "                ':val':  {'S':dict_data['count']}",
                "            }  ",
                "            )"
              ]
            ]
          }
        },
        "Description": "Used to verify wedding slot count",
        "Handler": "index.lambda_handler",
        "Role": "arn:aws:iam::096938558188:role/LabRole",
        "Runtime": "python3.9",
        "TracingConfig": {
          "Mode": "Active"
        }
      }
    },
    "MyLambdaFunction3": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "sendNotification",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "import json\n",
                "import boto3\n",
                "\n",
                "def lambda_handler(event, context):\n",
                "    sqs = boto3.client(\"sqs\")\n",
                "    sns_client = boto3.client(\"sns\")\n",
                "    print('inside util lambda')\n",
                "    queue_records=event['Records']\n",
                "    print('queue_records', queue_records)\n",
                "    record=queue_records[0]['body']\n",
                "    jsonMessage = json.loads(record)\n",
                "    print(jsonMessage['email'])\n",
                "    \n",
                "    if(jsonMessage['type'] == 'QUEUE'):\n",
                "        message = \"Thanks for booking with us. We will reach you out shortly !!\"\n",
                "        subject = \"Your booking update\"\n",
                "    else:\n",
                "        message = \"Sorry, we're at maximum capacity. Please try again in few days.\"\n",
                "        subject = \"Your booking update\"\n",
                "    \n",
                "    \n",
                "    response2 = sns_client.list_topics()['Topics']\n",
                "    print(response2)\n",
                "    \n",
                "        # Loop through each topic and retrieve its subscribers\n",
                "    for topic in response2:\n",
                "        topic_arn = topic['TopicArn']\n",
                "        if(topic_arn != 'arn:aws:sns:us-east-1:096938558188:RedshiftSNS'):\n",
                "            subscribers = sns_client.list_subscriptions_by_topic(TopicArn=topic_arn)['Subscriptions']\n",
                "            # Print the topic and its subscribers\n",
                "            print('Topic:', topic_arn)\n",
                "            print('Subscribers:')\n",
                "            for subscriber in subscribers:\n",
                "                if(subscriber['Endpoint'] == jsonMessage['email']):\n",
                "                    # message = \"Thanks for booking with us. We will reach you out shortly !!\"\n",
                "                    response = sns_client.publish(TopicArn = topic_arn, Message = message, Subject=subject)\n",
                "                    print(subscriber['Endpoint'])\n",
                "    \n",
                "    return response\n"
              ]
            ]
          }
        },
        "Description": "Used to verify wedding slot count",
        "Handler": "index.lambda_handler",
        "Role": "arn:aws:iam::096938558188:role/LabRole",
        "Runtime": "python3.9",
        "TracingConfig": {
          "Mode": "Active"
        }
      }
    },
    "MyLambdaFunction4": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "saveUsersCF",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "import json",
                "import boto3",
                "",
                "dynamo_client = boto3.client('dynamodb')",
                "sns_client = boto3.client('sns')",
                "",
                "def lambda_handler(event, context):",
                "    body = event",
                "    # body = json.loads(body)",
                "    print(body['email'])",
                "    # TODO implement",
                "    data = dynamo_client.put_item(",
                "    TableName='users_new',",
                "    Item={",
                "        'email': {",
                "          'S': body['email']",
                "        },",
                "        'firstname': {",
                "          'S': body['firstname']",
                "        },",
                "        'lastname': {",
                "          'S': body['lastname']",
                "        },",
                "        'password': {",
                "          'S': body['password']",
                "        }",
                "    }",
                "  )",
                "    data1 = dynamo_client.put_item(",
                "    TableName='wedding_slots_new1',",
                "    Item={",
                "        'event_date': {",
                "          'S': '12-04-2023'",
                "        },",
                "        'max_bookings': {",
                "          'S': '1'",
                "        }",
                "    }",
                "  )",
                "    data2 = dynamo_client.put_item(",
                "    TableName='birthday_slots_new1',",
                "    Item={",
                "        'event_date': {",
                "          'S': '12-04-2023'",
                "        },",
                "        'max_bookings': {",
                "          'S': '1'",
                "        }",
                "    }",
                "  )",
                "    topic_name = body['firstname'] + '-' + body['lastname']",
                "    ",
                "    # Create a topic",
                "    response = sns_client.create_topic(Name=str(topic_name))",
                "    ",
                "    # Get the ARN of the topic",
                "    topic_arn = response['TopicArn']",
                "    ",
                "    # Subscribe an email address to the topic",
                "    response = sns_client.subscribe(",
                "        TopicArn=topic_arn,",
                "        Protocol='email',",
                "        Endpoint=body['email']",
                "    )",
                "    ",
                "    return {",
                "      'statusCode': 200,",
                "      'body': 'successfully created item!',",
                "      'headers': {",
                "        'Content-Type': 'application/json',",
                "        'Access-Control-Allow-Origin': '*'",
                "      }",
                "  }"
              ]
            ]
          }
        },
        "Description": "Used to verify wedding slot count",
        "Handler": "index.lambda_handler",
        "Role": "arn:aws:iam::096938558188:role/LabRole",
        "Runtime": "python3.9",
        "TracingConfig": {
          "Mode": "Active"
        }
      }
    },
    "MyLambdaFunctionVerifySlots": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "verifyAllSlots",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "import json",
                "import boto3",
                "import os",
                "",
                "dynamodb = boto3.client('dynamodb')",
                "sqs_client = boto3.client('sqs')",
                "",
                "def lambda_handler(event, context):",
                "    event_type=event['eventtype']",
                "    date = event['date']",
                "    print(date)",
                "    print('The type is : ', type(date))",
                "",
                "    if event_type == 'wedding':",
                "        response = dynamodb.query(",
                "            TableName='wedding_slots_new1',",
                "            KeyConditionExpression='event_date = :pk',",
                "            ExpressionAttributeValues={",
                "                ':pk': {'S': date}",
                "            }",
                "        )",
                "    else:",
                "        response = dynamodb.query(",
                "            TableName='birthday_slots_new1',",
                "            KeyConditionExpression='event_date = :pk',",
                "            ExpressionAttributeValues={",
                "                ':pk': {'S': date}",
                "            }",
                "        )",
                "",
                "    print(' response[\"Items\"]', response['Items'])",
                "    for item in response['Items']:",
                "        slot_count = item['max_bookings']",
                "        print('slot_count ', slot_count['S'])",
                "",
                "    if slot_count['S'] != '0':",
                "        updateSlotCount(slot_count, date)",
                "        if event_type == 'wedding':",
                "            queueUrl = os.environ['weedingconfirmurl']",
                "        else:",
                "            queueUrl = os.environ['birthdayconfirmurl']",
                "        final_response=sendMessageToConfirmQueue(queueUrl,event)",
                "        print(final_response)",
                "    else:",
                "        if event_type == 'wedding':",
                "            queueUrl = os.environ['weedingnotconfirmurl']",
                "        else:",
                "            queueUrl = os.environ['birthdaynotconfirmurl']",
                "        final_response=sendMessageToNotAvailableQueue(queueUrl,event)",
                "        print(final_response)",
                "    return final_response",
                "",
                "",
                "def updateSlotCount(slot_count, date):",
                "    updated_count = int(slot_count['S']) - 1",
                "    dict_data = {",
                "        'date': date,",
                "        'count': str(updated_count)",
                "    }",
                "    result = dynamodb.update_item(",
                "        TableName='wedding_slots_new1',",
                "        Key={",
                "            'event_date': {'S': dict_data['date']}",
                "        },",
                "        UpdateExpression='SET max_bookings = :val',",
                "        ExpressionAttributeValues={",
                "            ':val': {'S': dict_data['count']}",
                "        }",
                "    )",
                "",
                "",
                "def sendMessageToConfirmQueue(queueUrl,event):",
                "    slot_response = {",
                "            'type': 'QUEUE',",
                "            'returnCode': 0,",
                "            'email': event['email'],",
                "            'firstname': event['firstname'],",
                "            'phone': event['phone'],",
                "            'city': event['city'],",
                "            'guestcount': event['guestcount'],",
                "            'date': event['date'],",
                "            'budget': event['budget']",
                "        }",
                "    response = sqs_client.send_message(",
                "         QueueUrl=queueUrl,",
                "           MessageBody=json.dumps(slot_response)",
                "        )",
                "    return slot_response",
                "",
                "",
                "def sendMessageToNotAvailableQueue(queueUrl,event):",
                "    slot_response = {",
                "            'type': 'APP',",
                "            'returnCode': 0,",
                "            'email': event['email'],",
                "            'firstname': event['firstname'],",
                "            'phone': event['phone'],",
                "            'city': event['city'],",
                "            'guestcount': event['guestcount'],",
                "            'date': event['date'],",
                "            'budget': event['budget']",
                "        }",
                "    response = sqs_client.send_message(",
                "         QueueUrl=queueUrl,",
                "           MessageBody=json.dumps(slot_response)",
                "        )",
                "    return slot_response",
                "",
                "",
                ""
              ]
            ]
          }
        },
        "Environment": {
          "Variables": {
            "weedingconfirmurl": {
              "Fn::GetAtt": [
                "MySQSQueue",
                "QueueUrl"
              ]
            },
            "birthdayconfirmurl": {
              "Fn::GetAtt": [
                "MySQSQueue2",
                "QueueUrl"
              ]
            },
            "weedingnotconfirmurl": {
              "Fn::GetAtt": [
                "MySQSQueue1",
                "QueueUrl"
              ]
            },
            "birthdaynotconfirmurl": {
              "Fn::GetAtt": [
                "MySQSQueue3",
                "QueueUrl"
              ]
            }
          }
        },
        "Description": "Used to verify  slot count",
        "Handler": "index.lambda_handler",
        "Role": "arn:aws:iam::096938558188:role/LabRole",
        "Runtime": "python3.9",
        "TracingConfig": {
          "Mode": "Active"
        }
      }
    },
    "MyDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          },
          {
            "AttributeName": "firstname",
            "AttributeType": "S"
          },
          {
            "AttributeName": "lastname",
            "AttributeType": "S"
          },
          {
            "AttributeName": "password",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "users_new",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "myindex1",
            "KeySchema": [
              {
                "AttributeName": "firstname",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          },
          {
            "IndexName": "myindex2",
            "KeySchema": [
              {
                "AttributeName": "lastname",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          },
          {
            "IndexName": "myindex3",
            "KeySchema": [
              {
                "AttributeName": "password",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          }
        ]
      }
    },
    "MyDynamoDBTable1": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "event_date",
            "AttributeType": "S"
          },
          {
            "AttributeName": "max_bookings",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "event_date",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "birthday_slots_new1",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "myindex1",
            "KeySchema": [
              {
                "AttributeName": "max_bookings",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          }
        ]
      }
    },
    "MyDynamoDBTable2": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "event_date",
            "AttributeType": "S"
          },
          {
            "AttributeName": "max_bookings",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "event_date",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "wedding_slots_new1",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "myindex1",
            "KeySchema": [
              {
                "AttributeName": "max_bookings",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          }
        ]
      }
    },
    "MySQSQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "weddingSlotAvailableCF"
      }
    },
    "MySQSQueue1": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "weddingSlotNotAvailableCF"
      }
    },
    "MySQSQueue2": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "birthdaySlotAvailableCF"
      }
    },
    "MySQSQueue3": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "birthdaySlotNotAvailableCF"
      }
    },
    "MyEventMap1": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "MySQSQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Ref": "MyLambdaFunction3"
        },
        "BatchSize": 10
      }
    },
    "MyEventMap2": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "MySQSQueue1",
            "Arn"
          ]
        },
        "FunctionName": {
          "Ref": "MyLambdaFunction3"
        },
        "BatchSize": 10
      }
    },
    "MyEventMap3": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "MySQSQueue2",
            "Arn"
          ]
        },
        "FunctionName": {
          "Ref": "MyLambdaFunction3"
        },
        "BatchSize": 10
      }
    },
    "MyEventMap4": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "MySQSQueue3",
            "Arn"
          ]
        },
        "FunctionName": {
          "Ref": "MyLambdaFunction3"
        },
        "BatchSize": 10
      }
    },
    "MyStateMachine5": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": [
            "{\r\n  \"Comment\": \"A description of my state machine\",\r\n  \"StartAt\": \"Choice\",\r\n  \"States\": {\r\n    \"Choice\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.eventtype\",\r\n          \"StringEquals\": \"wedding\",\r\n          \"Next\": \"Lambda Invoke\"\r\n        },\r\n        {\r\n          \"Variable\": \"$.eventtype\",\r\n          \"StringEquals\": \"birthday\",\r\n          \"Next\": \"Lambda Invoke (1)\"\r\n        }\r\n      ]\r\n    },\r\n    \"Lambda Invoke (1)\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\r\n      \"OutputPath\": \"$.Payload\",\r\n      \"Parameters\": {\r\n        \"Payload.$\": \"$\",\r\n        \"FunctionName\": \"${MyLambdaFunction2.Arn}\"\r\n      },\r\n      \"Retry\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"Lambda.ServiceException\",\r\n            \"Lambda.AWSLambdaException\",\r\n            \"Lambda.SdkClientException\",\r\n            \"Lambda.TooManyRequestsException\"\r\n          ],\r\n          \"IntervalSeconds\": 2,\r\n          \"MaxAttempts\": 6,\r\n          \"BackoffRate\": 2\r\n        }\r\n      ],\r\n      \"Next\": \"Choice (2)\"\r\n    },\r\n    \"Choice (2)\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.type\",\r\n          \"StringEquals\": \"QUEUE\",\r\n          \"Next\": \"BirthdaySlotsAvailable\"\r\n        }\r\n      ],\r\n      \"Default\": \"NoBirthdaySlots\"\r\n    },\r\n    \"BirthdaySlotsAvailable\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sqs:sendMessage\",\r\n      \"Parameters\": {\r\n        \"MessageBody.$\": \"$\",\r\n        \"QueueUrl\": \"${MySQSQueue.QueueUrl}\"\r\n      },\r\n      \"End\": true\r\n    },\r\n    \"Lambda Invoke\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\r\n      \"OutputPath\": \"$.Payload\",\r\n      \"Parameters\": {\r\n        \"Payload.$\": \"$\",\r\n        \"FunctionName\": \"${MyLambdaFunction.Arn}\"\r\n      },\r\n      \"Retry\": [\r\n        {\r\n          \"ErrorEquals\": [\r\n            \"Lambda.ServiceException\",\r\n            \"Lambda.AWSLambdaException\",\r\n            \"Lambda.SdkClientException\",\r\n            \"Lambda.TooManyRequestsException\"\r\n          ],\r\n          \"IntervalSeconds\": 2,\r\n          \"MaxAttempts\": 6,\r\n          \"BackoffRate\": 2\r\n        }\r\n      ],\r\n      \"Next\": \"Choice (1)\"\r\n    },\r\n    \"Choice (1)\": {\r\n      \"Type\": \"Choice\",\r\n      \"Choices\": [\r\n        {\r\n          \"Variable\": \"$.type\",\r\n          \"StringEquals\": \"QUEUE\",\r\n          \"Next\": \"WeddingSlotsAvailable\"\r\n        }\r\n      ],\r\n      \"Default\": \"NoWeddingSlots\"\r\n    },\r\n    \"NoWeddingSlots\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sqs:sendMessage\",\r\n      \"Parameters\": {\r\n        \"MessageBody.$\": \"$\",\r\n        \"QueueUrl\": \"${MySQSQueue1.QueueUrl}\"\r\n      },\r\n      \"End\": true\r\n    },\r\n    \"WeddingSlotsAvailable\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sqs:sendMessage\",\r\n      \"Parameters\": {\r\n        \"MessageBody.$\": \"$\",\r\n        \"QueueUrl\": \"${MySQSQueue2.QueueUrl}\"\r\n      },\r\n      \"End\": true\r\n    },\r\n    \"NoBirthdaySlots\": {\r\n      \"Type\": \"Task\",\r\n      \"Resource\": \"arn:aws:states:::sqs:sendMessage\",\r\n      \"Parameters\": {\r\n        \"MessageBody.$\": \"$\",\r\n        \"QueueUrl\": \"${MySQSQueue3.QueueUrl}\"\r\n      },\r\n      \"End\": true\r\n    }\r\n  }\r\n}",
            {
              "lambdaArn": {
                "Fn::GetAtt": [
                  "MyLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "RoleArn": "arn:aws:iam::096938558188:role/LabRole"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "eventmanagenetcf",
        "Description": "Term Assignment API Gateway",
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        }
      }
    },
    "ApiGatewayResourceSaveUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "PathPart": "saveusertodbcf",
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        }
      }
    },
    "ApiGatewayMethodSaveUser": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSaveUser"
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction4.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": "$input.json('$')"
              }
            }
          ],
          "Credentials": "arn:aws:iam::096938558188:role/LabRole"
        },
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ]
      },
      "DependsOn": [
        "MyLambdaFunction4"
      ]
    },
    "MyApiGatewayPermission1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MyLambdaFunctionVerifySlots",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayResourceSaveUser1": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "PathPart": "verifyavailableslots",
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        }
      }
    },
    "ApiGatewayMethodSaveUser1": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSaveUser1"
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunctionVerifySlots.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": "$input.json('$')"
              }
            }
          ],
          "Credentials": "arn:aws:iam::096938558188:role/LabRole"
        },
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ]
      },
      "DependsOn": [
        "MyLambdaFunctionVerifySlots"
      ]
    },
    "ApiGatewayResourceStepFunction": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "PathPart": "initiateflow"
      }
    },
    "ApiGatewayMethodStepFunction": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceStepFunction"
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:states:action/StartExecution"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": "$input.json('$')"
              }
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"input\": \"$input\", \"stateMachineArn\": \"${StateMachineArn}\"}"
          },
          "Credentials": "arn:aws:iam::096938558188:role/LabRole"
        },
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ]
      }
    },
    "ApiGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodSaveUser"
      ]
    },
    "MyEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": "ami-0e38fa17744b2f6a5",
        "InstanceType": "t2.small",
        "KeyName": "computewindows",
        "SecurityGroupIds": [
          "sg-0896292808ca0e763"
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "eventInstanceCF"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ApiGatewayEndpoint": {
      "Description": "Endpoint URL of the API Gateway",
      "Value": {
        "Fn::Sub": "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
      }
    },
    "MyStateMachine5Arn": {
      "Value": {
        "Fn::GetAtt": [
          "MyStateMachine5",
          "Arn"
        ]
      }
    },
    "weddingslotLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "MyLambdaFunction",
          "Arn"
        ]
      }
    },
    "birthdayslotLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "MyLambdaFunction2",
          "Arn"
        ]
      }
    },
    "bdSlotConfirmArn": {
      "Value": {
        "Fn::GetAtt": [
          "MySQSQueue2",
          "Arn"
        ]
      }
    },
    "bdSlotNoConfirmArn": {
      "Value": {
        "Fn::GetAtt": [
          "MySQSQueue3",
          "Arn"
        ]
      }
    },
    "wedSlotNoConfirmArn": {
      "Value": {
        "Fn::GetAtt": [
          "MySQSQueue1",
          "Arn"
        ]
      }
    },
    "wedSlotConfirmArn": {
      "Value": {
        "Fn::GetAtt": [
          "MySQSQueue",
          "Arn"
        ]
      }
    }
  }
}